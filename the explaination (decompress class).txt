three classes (byte_int, compree, decompress)

decompress class
1{

private
2{

step1

reads a Huffman-encoded file and reconstructs a map of Huffman codes to their corresponding characters.

Initialization:
A map<string, char> named codemap is initialized to store the Huffman codes
and their corresponding characters.
A fstream object hufffile is opened in input (ios::in) and binray
(ios::binary) mode to read the file specified by name.


Reading and Parsing:
Two strings, temp and t, are initialized to empty strings.
Two characters, charr and huff_char, are declared.
A boolean gate is initialized to true.

Loop:
The loop reads each character from the file using hufffile.get(charr).
If gate is true, the current character charr is assigned to huff_char.
If charr is a backslash (‘\’), it indicates the end of a Huffman code:
The code stored in temp is inserted into codemap with huff_char as the value.
temp is reset to an empty string, and gate is set to true.
If charr is not a backslash and gate is false, the character is appended to temp.
If charr is not a backslash, gate is set to false.

Closing the File:
The file is closed using hufffile.close().
Return:
The function returns the codemap containing the Huffman codes and their corresponding characters.

Example:
If the file contains Huffman codes
like “r00\a01”, the resulting map will have entries like {"00": 'r', "01": 'a'}.
.................................................................................

get_char

decodes a string of bits into characters using a Huffman 
code map and writes the decoded characters to a file.

Initialization:
int i = 0; initializes the index for iterating through the bits string.

Loop:
The while loop iterates through each bit in the bits string 
until it reaches the null terminator ('\0').
For each bit, it appends the bit to the key string.
It checks if key exists in the codemap using codemap.count(key).

Decoding:
If key matches a key in codemap (i.e., it is true), it:
Retrieves the corresponding character from codemap and writes it to the output file.
Resets key to an empty string.

Reset:
After processing all bits, it resets bits to an empty string.

Example:
If bits is “00010011” and codemap contains entries like {"0001": 'a', "001": 'b', "1": 'c'},
the function will decode the bits into characters ‘a’ and ‘b’ and ‘c’ and write them to the output file.
........................................................................................................

step2

decodes a Huffman-compressed file and writes the decompressed data to a new file.

File Handling:
Opens the compressed file old for reading in binary mode.
Opens the output file neww for writing in binary mode.

Initialization:
byte_int conv; is a utility for converting between binary strings and integers.
char num; is used to read bytes from the compressed file.
string temp, tool = "", container = ""; are used to accumulate bits and temporary data.
bool gate = false; controls the flow of the loop.
char lastbyte = encoded.get(); reads the first byte from the compressed file.

Loop:
The loop reads each byte from the compressed file.
For each byte, it swaps num and lastbyte to process the current byte and prepare for the next.
Converts the byte to its binary string representation using conv.to_byte((int)(unsigned char) num).
Appends the binary string to temp.
Calls get_char(gate, temp, code, tool, decoded) to decode the accumulated bits and write the corresponding characters to the output file.
Final Processing:
After the loop, processes the last byte, taking into account the number of padding bits (trash).
Appends the valid bits from the last byte to temp.
Calls get_char(gate, temp, code, tool, decoded) to decode any remaining bits.

Closing the Files:
Closes both the input and output file streams.
..............................................

operation

orchestrates the process of decompressing a Huffman-encoded file.

User Input:
Prompts the user to enter the name of the Huffman code file (tree).
Prompts the user to enter the name of the compressed file to decompress (name_of_old).

Step 1:
 Reconstruct Huffman Map:
Calls step1(tree) to read the Huffman code file and reconstruct
a map<string, char> huffmap that maps Huffman codes to their corresponding characters.

Get Trash Bits:
Calls trashnumber() to get the number of padding bits added during compression (trash).

User Input:
Prompts the user to enter the name and extension for the decompressed file (new_file).

Step 2: Decompress File:
Calls step2(name_of_old, new_file, huffmap, trash) to decompress the file:
Reads the compressed file (name_of_old).
Uses the Huffman map (huffmap) to decode the compressed data.
Writes the decompressed data to the new file (new_file), taking into account the padding bits (trash).

}2

public
3{



}3

}1